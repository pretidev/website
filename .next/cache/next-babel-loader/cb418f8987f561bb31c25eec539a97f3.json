{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mac/Documents/Projects/pretidev-site/src/components/Seo.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useMemo } from \"react\";\nimport { Head } from \"next/document\";\nexport var Seo = function Seo(_ref) {\n  _s();\n\n  var description = _ref.description,\n      title = _ref.title,\n      _ref$meta = _ref.meta,\n      meta = _ref$meta === void 0 ? [] : _ref$meta;\n  var baseMeta = useMemo([{\n    name: \"description\",\n    content: description\n  }, {\n    property: \"og:title\",\n    content: title\n  }, {\n    property: \"og:description\",\n    content: description\n  }, {\n    property: \"og:type\",\n    content: \"website\"\n  }, {\n    name: \"twitter:card\",\n    content: \"summary\"\n  }, {\n    name: \"twitter:title\",\n    content: title\n  }, {\n    name: \"twitter:description\",\n    content: description\n  }], []);\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"meta\", {\n    name: \"description\",\n    content: description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), [].concat(_toConsumableArray(baseMeta), [meta]).map(function (m) {\n    return __jsx(\"meta\", {\n      key: m.name,\n      name: m.name,\n      content: m.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    });\n  })));\n};\n\n_s(Seo, \"HqlJO2CNJ77XQlKnQj9KSRJrQVY=\");\n\n_c = Seo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Seo\");","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/components/Seo.tsx"],"names":["React","useMemo","Head","Seo","description","title","meta","baseMeta","name","content","property","map","m"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAoBC,OAApB,QAAmC,OAAnC;AACA,SAASC,IAAT,QAAqB,eAArB;AAoBA,OAAO,IAAMC,GAAiB,GAAG,SAApBA,GAAoB,OAAuC;AAAA;;AAAA,MAApCC,WAAoC,QAApCA,WAAoC;AAAA,MAAvBC,KAAuB,QAAvBA,KAAuB;AAAA,uBAAhBC,IAAgB;AAAA,MAAhBA,IAAgB,0BAAT,EAAS;AACtE,MAAMC,QAAgB,GAAGN,OAAO,CAC9B,CACE;AACEO,IAAAA,IAAI,eADN;AAEEC,IAAAA,OAAO,EAAEL;AAFX,GADF,EAKE;AACEM,IAAAA,QAAQ,YADV;AAEED,IAAAA,OAAO,EAAEJ;AAFX,GALF,EASE;AACEK,IAAAA,QAAQ,kBADV;AAEED,IAAAA,OAAO,EAAEL;AAFX,GATF,EAaE;AACEM,IAAAA,QAAQ,WADV;AAEED,IAAAA,OAAO;AAFT,GAbF,EAiBE;AACED,IAAAA,IAAI,gBADN;AAEEC,IAAAA,OAAO;AAFT,GAjBF,EAqBE;AACED,IAAAA,IAAI,iBADN;AAEEC,IAAAA,OAAO,EAAEJ;AAFX,GArBF,EAyBE;AACEG,IAAAA,IAAI,uBADN;AAEEC,IAAAA,OAAO,EAAEL;AAFX,GAzBF,CAD8B,EA+B9B,EA/B8B,CAAhC;AAkCA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQC,KAAR,CADF,EAEE;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAED,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIG,6BAAIG,QAAJ,IAAcD,IAAd,GAAoBK,GAApB,CAAwB,UAAAC,CAAC;AAAA,WACxB;AAAM,MAAA,GAAG,EAAEA,CAAC,CAACJ,IAAb;AAAmB,MAAA,IAAI,EAAEI,CAAC,CAACJ,IAA3B;AAAiC,MAAA,OAAO,EAAEI,CAAC,CAACH,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADwB;AAAA,GAAzB,CAJH,CADF,CADF;AAYD,CA/CM;;GAAMN,G;;KAAAA,G","sourcesContent":["import React, { FC, useMemo } from \"react\"\nimport { Head } from \"next/document\"\n\ninterface MetaProperty {\n  property: string\n  content: string\n}\n\ninterface MetaName {\n  name: string\n  content: string\n}\n\ntype Meta = MetaName | MetaProperty\n\nexport interface SeoProps {\n  title: string\n  description: string\n  meta?: Meta[]\n}\n\nexport const Seo: FC<SeoProps> = ({ description, title, meta = [] }) => {\n  const baseMeta: Meta[] = useMemo(\n    [\n      {\n        name: `description`,\n        content: description,\n      },\n      {\n        property: `og:title`,\n        content: title,\n      },\n      {\n        property: `og:description`,\n        content: description,\n      },\n      {\n        property: `og:type`,\n        content: `website`,\n      },\n      {\n        name: `twitter:card`,\n        content: `summary`,\n      },\n      {\n        name: `twitter:title`,\n        content: title,\n      },\n      {\n        name: `twitter:description`,\n        content: description,\n      },\n    ],\n    []\n  )\n\n  return (\n    <>\n      <Head>\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n\n        {[...baseMeta, meta].map(m => (\n          <meta key={m.name} name={m.name} content={m.content} />\n        ))}\n      </Head>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}