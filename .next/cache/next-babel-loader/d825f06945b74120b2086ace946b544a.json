{"ast":null,"code":"import { useRef, useEffect } from \"react\";\nexport const useAnimationFrame = (callback, deps) => {\n  const requestRef = useRef();\n  const previousTimeRef = useRef();\n\n  const animate = time => {\n    if (previousTimeRef.current != undefined) {\n      const deltaTime = time - (previousTimeRef === null || previousTimeRef === void 0 ? void 0 : previousTimeRef.current);\n      callback(deltaTime);\n    }\n\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current);\n      }\n    };\n  }, deps);\n};","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/hooks/useAnimationFrame.ts"],"names":["useRef","useEffect","useAnimationFrame","callback","deps","requestRef","previousTimeRef","animate","time","current","undefined","deltaTime","requestAnimationFrame","cancelAnimationFrame"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,SAAjB,QAAkD,OAAlD;AAIA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,QAD+B,EAE/BC,IAF+B,KAGtB;AACT,QAAMC,UAAU,GAAGL,MAAM,EAAzB;AACA,QAAMM,eAAe,GAAGN,MAAM,EAA9B;;AAEA,QAAMO,OAAO,GAAIC,IAAD,IAAkB;AAChC,QAAIF,eAAe,CAACG,OAAhB,IAA2BC,SAA/B,EAA0C;AACxC,YAAMC,SAAS,GAAGH,IAAI,IAAGF,eAAH,aAAGA,eAAH,uBAAGA,eAAe,CAAEG,OAApB,CAAtB;AAEAN,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD;;AAEDL,IAAAA,eAAe,CAACG,OAAhB,GAA0BD,IAA1B;AACAH,IAAAA,UAAU,CAACI,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AACD,GATD;;AAWAN,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,UAAU,CAACI,OAAX,GAAqBG,qBAAqB,CAACL,OAAD,CAA1C;AAEA,WAAO,MAAM;AACX,UAAIF,UAAU,CAACI,OAAf,EAAwB;AACtBI,QAAAA,oBAAoB,CAACR,UAAU,CAACI,OAAZ,CAApB;AACD;AACF,KAJD;AAKD,GARQ,EAQNL,IARM,CAAT;AASD,CA3BM","sourcesContent":["import { useRef, useEffect, DependencyList } from \"react\"\n\nexport type AnimationFrameCallback = (deltaTime: number) => any\n\nexport const useAnimationFrame = (\n  callback: AnimationFrameCallback,\n  deps?: DependencyList | undefined\n): void => {\n  const requestRef = useRef<number | undefined>()\n  const previousTimeRef = useRef<number | undefined>()\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current != undefined) {\n      const deltaTime = time - previousTimeRef?.current\n\n      callback(deltaTime)\n    }\n\n    previousTimeRef.current = time\n    requestRef.current = requestAnimationFrame(animate)\n  }\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate)\n\n    return () => {\n      if (requestRef.current) {\n        cancelAnimationFrame(requestRef.current)\n      }\n    }\n  }, deps)\n}\n"]},"metadata":{},"sourceType":"module"}