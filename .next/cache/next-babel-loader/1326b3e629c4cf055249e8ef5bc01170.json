{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useWindowSizes } from \"./useWindowSizes\";\nimport { breakpoints } from \"../constants\";\nimport AppContext from \"../contexts/appContext\";\n\nvar getDeviceConfig = function getDeviceConfig(width) {\n  if (width === undefined) {\n    return \"sm\";\n  }\n\n  if (width < breakpoints.sm) {\n    return \"xs\";\n  } else if (width >= breakpoints.sm && width < breakpoints.md) {\n    return \"sm\";\n  } else if (width >= breakpoints.md && width < breakpoints.lg) {\n    return \"md\";\n  } else if (width >= breakpoints.lg) {\n    return \"lg\";\n  }\n\n  return \"sm\";\n};\n\nexport var useBreakPoints = function useBreakPoints() {\n  _s();\n\n  var _useWindowSizes = useWindowSizes(),\n      width = _useWindowSizes.width;\n\n  var _useContext = useContext(AppContext),\n      initialDeviceType = _useContext.deviceType;\n\n  var _useState = useState(getDeviceConfig(width)),\n      deviceType = _useState[0],\n      setDeviceType = _useState[1];\n\n  useEffect(function () {\n    setDeviceType(getDeviceConfig(width));\n  }, [width]);\n  return deviceType;\n};\n\n_s(useBreakPoints, \"oWDqRoD/gcRewkatlIqkan+Tq78=\", false, function () {\n  return [useWindowSizes];\n});","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/hooks/useBreakPoints.ts"],"names":["useState","useEffect","useContext","useWindowSizes","breakpoints","AppContext","getDeviceConfig","width","undefined","sm","md","lg","useBreakPoints","initialDeviceType","deviceType","setDeviceType"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAEA,OAAOC,UAAP,MAAuB,wBAAvB;;AAUA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA2C;AACjE,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAID,KAAK,GAAGH,WAAW,CAACK,EAAxB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO,IAAIF,KAAK,IAAIH,WAAW,CAACK,EAArB,IAA2BF,KAAK,GAAGH,WAAW,CAACM,EAAnD,EAAuD;AAC5D,WAAO,IAAP;AACD,GAFM,MAEA,IAAIH,KAAK,IAAIH,WAAW,CAACM,EAArB,IAA2BH,KAAK,GAAGH,WAAW,CAACO,EAAnD,EAAuD;AAC5D,WAAO,IAAP;AACD,GAFM,MAEA,IAAIJ,KAAK,IAAIH,WAAW,CAACO,EAAzB,EAA6B;AAClC,WAAO,IAAP;AACD;;AAED,SAAO,IAAP;AACD,CAhBD;;AAkBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkB;AAAA;;AAAA,wBAC5BT,cAAc,EADc;AAAA,MACtCI,KADsC,mBACtCA,KADsC;;AAAA,oBAEJL,UAAU,CAACG,UAAD,CAFN;AAAA,MAE1BQ,iBAF0B,eAEtCC,UAFsC;;AAAA,kBAGVd,QAAQ,CAC1CM,eAAe,CAACC,KAAD,CAD2B,CAHE;AAAA,MAGvCO,UAHuC;AAAA,MAG3BC,aAH2B;;AAO9Cd,EAAAA,SAAS,CAAC,YAAM;AACdc,IAAAA,aAAa,CAACT,eAAe,CAACC,KAAD,CAAhB,CAAb;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,SAAOO,UAAP;AACD,CAZM;;GAAMF,c;UACOT,c","sourcesContent":["import { useState, useEffect, useContext } from \"react\"\nimport { useWindowSizes } from \"./useWindowSizes\"\nimport { breakpoints } from \"../constants\"\nimport { DeviceType } from \"../types\"\nimport AppContext from \"../contexts/appContext\"\n\ntype DeviceCallback = (device: DeviceType) => boolean\n\nexport interface UseBreakPointsReturn {\n  isDeviceMin: DeviceCallback\n  isDeviceMax: DeviceCallback\n  device: DeviceType\n}\n\nconst getDeviceConfig = (width: number | undefined): DeviceType => {\n  if (width === undefined) {\n    return \"sm\"\n  }\n\n  if (width < breakpoints.sm) {\n    return \"xs\"\n  } else if (width >= breakpoints.sm && width < breakpoints.md) {\n    return \"sm\"\n  } else if (width >= breakpoints.md && width < breakpoints.lg) {\n    return \"md\"\n  } else if (width >= breakpoints.lg) {\n    return \"lg\"\n  }\n\n  return \"sm\"\n}\n\nexport const useBreakPoints = (): DeviceType => {\n  const { width } = useWindowSizes()\n  const { deviceType: initialDeviceType } = useContext(AppContext)\n  const [deviceType, setDeviceType] = useState<DeviceType>(\n    getDeviceConfig(width)\n  )\n\n  useEffect(() => {\n    setDeviceType(getDeviceConfig(width))\n  }, [width])\n\n  return deviceType\n}\n"]},"metadata":{},"sourceType":"module"}