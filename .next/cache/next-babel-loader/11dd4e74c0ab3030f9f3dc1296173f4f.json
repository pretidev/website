{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { useWindowSizes } from \"./useWindowSizes\";\nimport { breakpoints } from \"../constants\";\n\nvar getDeviceConfig = function getDeviceConfig(width) {\n  if (width === undefined) {\n    return \"sm\";\n  }\n\n  if (width < breakpoints.sm) {\n    return \"xs\";\n  } else if (width >= breakpoints.sm && width < breakpoints.md) {\n    return \"sm\";\n  } else if (width >= breakpoints.md && width < breakpoints.lg) {\n    return \"md\";\n  } else if (width >= breakpoints.lg) {\n    return \"lg\";\n  }\n\n  return \"sm\";\n};\n\nexport var useBreakPoints = function useBreakPoints() {\n  _s();\n\n  var _useWindowSizes = useWindowSizes(),\n      width = _useWindowSizes.width;\n\n  var _useState = useState(function () {\n    return getDeviceConfig(width);\n  }),\n      deviceType = _useState[0],\n      setDeviceType = _useState[1];\n\n  useEffect(function () {\n    setDeviceType(getDeviceConfig(width));\n  }, [width]);\n  return deviceType;\n};\n\n_s(useBreakPoints, \"9ypRVlXO4AEa+qlVXgUpapG+924=\", false, function () {\n  return [useWindowSizes];\n});","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/hooks/useBreakPoints.ts"],"names":["useState","useEffect","useWindowSizes","breakpoints","getDeviceConfig","width","undefined","sm","md","lg","useBreakPoints","deviceType","setDeviceType"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,QAA4B,cAA5B;;AAWA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA2C;AACjE,MAAIA,KAAK,KAAKC,SAAd,EAAyB;AACvB,WAAO,IAAP;AACD;;AAED,MAAID,KAAK,GAAGF,WAAW,CAACI,EAAxB,EAA4B;AAC1B,WAAO,IAAP;AACD,GAFD,MAEO,IAAIF,KAAK,IAAIF,WAAW,CAACI,EAArB,IAA2BF,KAAK,GAAGF,WAAW,CAACK,EAAnD,EAAuD;AAC5D,WAAO,IAAP;AACD,GAFM,MAEA,IAAIH,KAAK,IAAIF,WAAW,CAACK,EAArB,IAA2BH,KAAK,GAAGF,WAAW,CAACM,EAAnD,EAAuD;AAC5D,WAAO,IAAP;AACD,GAFM,MAEA,IAAIJ,KAAK,IAAIF,WAAW,CAACM,EAAzB,EAA6B;AAClC,WAAO,IAAP;AACD;;AAED,SAAO,IAAP;AACD,CAhBD;;AAkBA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAkB;AAAA;;AAAA,wBAC5BR,cAAc,EADc;AAAA,MACtCG,KADsC,mBACtCA,KADsC;;AAAA,kBAEVL,QAAQ,CAAa;AAAA,WACvDI,eAAe,CAACC,KAAD,CADwC;AAAA,GAAb,CAFE;AAAA,MAEvCM,UAFuC;AAAA,MAE3BC,aAF2B;;AAM9CX,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,aAAa,CAACR,eAAe,CAACC,KAAD,CAAhB,CAAb;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAIA,SAAOM,UAAP;AACD,CAXM;;GAAMD,c;UACOR,c","sourcesContent":["import { useState, useEffect } from \"react\"\nimport { useWindowSizes } from \"./useWindowSizes\"\nimport { breakpoints } from \"../constants\"\nimport { DeviceType } from \"../types\"\n\ntype DeviceCallback = (device: DeviceType) => boolean\n\nexport interface UseBreakPointsReturn {\n  isDeviceMin: DeviceCallback\n  isDeviceMax: DeviceCallback\n  device: DeviceType\n}\n\nconst getDeviceConfig = (width: number | undefined): DeviceType => {\n  if (width === undefined) {\n    return \"sm\"\n  }\n\n  if (width < breakpoints.sm) {\n    return \"xs\"\n  } else if (width >= breakpoints.sm && width < breakpoints.md) {\n    return \"sm\"\n  } else if (width >= breakpoints.md && width < breakpoints.lg) {\n    return \"md\"\n  } else if (width >= breakpoints.lg) {\n    return \"lg\"\n  }\n\n  return \"sm\"\n}\n\nexport const useBreakPoints = (): DeviceType => {\n  const { width } = useWindowSizes()\n  const [deviceType, setDeviceType] = useState<DeviceType>(() =>\n    getDeviceConfig(width)\n  )\n\n  useEffect(() => {\n    setDeviceType(getDeviceConfig(width))\n  }, [width])\n\n  return deviceType\n}\n"]},"metadata":{},"sourceType":"module"}