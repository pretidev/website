{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/mac/Documents/Projects/pretidev-site/src/components/Seo.tsx\";\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Head } from \"next/document\";\nexport var Seo = function Seo(_ref) {\n  var description = _ref.description,\n      title = _ref.title,\n      _ref$lang = _ref.lang,\n      lang = _ref$lang === void 0 ? \"fr\" : _ref$lang,\n      _ref$meta = _ref.meta,\n      meta = _ref$meta === void 0 ? [] : _ref$meta;\n  var baseMeta = [{\n    name: \"description\",\n    content: metaDescription\n  }, {\n    property: \"og:title\",\n    content: title\n  }, {\n    property: \"og:description\",\n    content: metaDescription\n  }, {\n    property: \"og:type\",\n    content: \"website\"\n  }, {\n    name: \"twitter:card\",\n    content: \"summary\"\n  }, {\n    name: \"twitter:title\",\n    content: title\n  }, {\n    name: \"twitter:description\",\n    content: metaDescription\n  }];\n  return __jsx(React.Fragment, null, __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"meta\", {\n    name: \"description\",\n    content: description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), meta.map(function (m) {\n    return __jsx(\"meta\", {\n      key: m.name,\n      name: m.name,\n      content: m.content,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    });\n  })));\n};\n_c = Seo;\n\nvar _c;\n\n$RefreshReg$(_c, \"Seo\");","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/components/Seo.tsx"],"names":["React","Head","Seo","description","title","lang","meta","baseMeta","name","content","metaDescription","property","map","m"],"mappings":";;;;AAAA,OAAOA,KAAP,MAA0B,OAA1B;AACA,SAASC,IAAT,QAAqB,eAArB;AAqBA,OAAO,IAAMC,GAAiB,GAAG,SAApBA,GAAoB,OAK3B;AAAA,MAJJC,WAII,QAJJA,WAII;AAAA,MAHJC,KAGI,QAHJA,KAGI;AAAA,uBAFJC,IAEI;AAAA,MAFJA,IAEI,0BAFG,IAEH;AAAA,uBADJC,IACI;AAAA,MADJA,IACI,0BADG,EACH;AACJ,MAAMC,QAAgB,GAAG,CACvB;AACEC,IAAAA,IAAI,eADN;AAEEC,IAAAA,OAAO,EAAEC;AAFX,GADuB,EAKvB;AACEC,IAAAA,QAAQ,YADV;AAEEF,IAAAA,OAAO,EAAEL;AAFX,GALuB,EASvB;AACEO,IAAAA,QAAQ,kBADV;AAEEF,IAAAA,OAAO,EAAEC;AAFX,GATuB,EAavB;AACEC,IAAAA,QAAQ,WADV;AAEEF,IAAAA,OAAO;AAFT,GAbuB,EAiBvB;AACED,IAAAA,IAAI,gBADN;AAEEC,IAAAA,OAAO;AAFT,GAjBuB,EAqBvB;AACED,IAAAA,IAAI,iBADN;AAEEC,IAAAA,OAAO,EAAEL;AAFX,GArBuB,EAyBvB;AACEI,IAAAA,IAAI,uBADN;AAEEC,IAAAA,OAAO,EAAEC;AAFX,GAzBuB,CAAzB;AA+BA,SACE,4BACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQN,KAAR,CADF,EAEE;AAAM,IAAA,IAAI,EAAC,aAAX;AAAyB,IAAA,OAAO,EAAED,WAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIGG,IAAI,CAACM,GAAL,CAAS,UAAAC,CAAC;AAAA,WACT;AAAM,MAAA,GAAG,EAAEA,CAAC,CAACL,IAAb;AAAmB,MAAA,IAAI,EAAEK,CAAC,CAACL,IAA3B;AAAiC,MAAA,OAAO,EAAEK,CAAC,CAACJ,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADS;AAAA,GAAV,CAJH,CADF,CADF;AAYD,CAjDM;KAAMP,G","sourcesContent":["import React, { FC } from \"react\"\nimport { Head } from \"next/document\"\n\ninterface Property {\n  property: string\n  content: string\n}\n\ninterface MetaName {\n  name: string\n  content: string\n}\n\ntype Meta = MetaName | MetaProperty\n\nexport interface SeoProps {\n  title: string\n  description: string\n  lang?: \"fr\" | \"en\"\n  meta?: Meta[]\n}\n\nexport const Seo: FC<SeoProps> = ({\n  description,\n  title,\n  lang = \"fr\",\n  meta = [],\n}) => {\n  const baseMeta: Meta[] = [\n    {\n      name: `description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:title`,\n      content: title,\n    },\n    {\n      property: `og:description`,\n      content: metaDescription,\n    },\n    {\n      property: `og:type`,\n      content: `website`,\n    },\n    {\n      name: `twitter:card`,\n      content: `summary`,\n    },\n    {\n      name: `twitter:title`,\n      content: title,\n    },\n    {\n      name: `twitter:description`,\n      content: metaDescription,\n    },\n  ]\n\n  return (\n    <>\n      <Head>\n        <title>{title}</title>\n        <meta name=\"description\" content={description} />\n\n        {meta.map(m => (\n          <meta key={m.name} name={m.name} content={m.content} />\n        ))}\n      </Head>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}