{"ast":null,"code":"export var drawWave = function drawWave(ctx, width, height, length, amplitude, animation, color) {\n  ctx.fillStyle = color;\n  ctx.beginPath();\n  ctx.moveTo(width / 3, 0);\n  var j = 0;\n  var i = width / 3;\n\n  while (i < width) {\n    var y = j + Math.sin(j * length + animation) * (amplitude * Math.sin(animation)) - amplitude;\n    ctx.lineTo(i, y);\n    j++;\n    i++;\n  }\n\n  ctx.lineTo(width, height);\n  ctx.lineTo(width, 0);\n  ctx.closePath();\n  ctx.fill();\n};","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/services/drawWave.ts"],"names":["drawWave","ctx","width","height","length","amplitude","animation","color","fillStyle","beginPath","moveTo","j","i","y","Math","sin","lineTo","closePath","fill"],"mappings":"AAGA,OAAO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CACtBC,GADsB,EAEtBC,KAFsB,EAGtBC,MAHsB,EAItBC,MAJsB,EAKtBC,SALsB,EAMtBC,SANsB,EAOtBC,KAPsB,EAQb;AACTN,EAAAA,GAAG,CAACO,SAAJ,GAAgBD,KAAhB;AAEAN,EAAAA,GAAG,CAACQ,SAAJ;AACAR,EAAAA,GAAG,CAACS,MAAJ,CAAWR,KAAK,GAAG,CAAnB,EAAsB,CAAtB;AAEA,MAAIS,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAGV,KAAK,GAAG,CAAhB;;AAEA,SAAOU,CAAC,GAAGV,KAAX,EAAkB;AAChB,QAAMW,CAAC,GACLF,CAAC,GACDG,IAAI,CAACC,GAAL,CAASJ,CAAC,GAAGP,MAAJ,GAAaE,SAAtB,KAAoCD,SAAS,GAAGS,IAAI,CAACC,GAAL,CAAST,SAAT,CAAhD,CADA,GAEAD,SAHF;AAKAJ,IAAAA,GAAG,CAACe,MAAJ,CAAWJ,CAAX,EAAcC,CAAd;AAEAF,IAAAA,CAAC;AACDC,IAAAA,CAAC;AACF;;AAEDX,EAAAA,GAAG,CAACe,MAAJ,CAAWd,KAAX,EAAkBC,MAAlB;AACAF,EAAAA,GAAG,CAACe,MAAJ,CAAWd,KAAX,EAAkB,CAAlB;AACAD,EAAAA,GAAG,CAACgB,SAAJ;AACAhB,EAAAA,GAAG,CAACiB,IAAJ;AACD,CAjCM","sourcesContent":["export type Point = [number, number]\nexport type CubicBezier = [number, number, number, number, number, number]\n\nexport const drawWave = (\n  ctx: CanvasRenderingContext2D,\n  width: number,\n  height: number,\n  length: number,\n  amplitude: number,\n  animation: number,\n  color: string\n): void => {\n  ctx.fillStyle = color\n\n  ctx.beginPath()\n  ctx.moveTo(width / 3, 0)\n\n  let j = 0\n  let i = width / 3\n\n  while (i < width) {\n    const y =\n      j +\n      Math.sin(j * length + animation) * (amplitude * Math.sin(animation)) -\n      amplitude\n\n    ctx.lineTo(i, y)\n\n    j++\n    i++\n  }\n\n  ctx.lineTo(width, height)\n  ctx.lineTo(width, 0)\n  ctx.closePath()\n  ctx.fill()\n}\n"]},"metadata":{},"sourceType":"module"}