{"ast":null,"code":"import { useEffect, useState } from \"react\";\nconst isClient = false;\n\nconst getSize = () => {\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined\n  };\n};\n\nexport const useWindowSizes = () => {\n  const {\n    0: windowSize,\n    1: setWindowSize\n  } = useState(getSize);\n  useEffect(() => {\n    if (!isClient) {\n      return;\n    }\n\n    const handleResize = () => {\n      setWindowSize(getSize());\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n  return windowSize;\n};","map":{"version":3,"sources":["/Users/mac/Documents/Projects/pretidev-site/src/hooks/useWindowSizes.ts"],"names":["useEffect","useState","isClient","getSize","width","window","innerWidth","undefined","height","innerHeight","useWindowSizes","windowSize","setWindowSize","handleResize","addEventListener","removeEventListener"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,MAAMC,QAAQ,QAAd;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,SAAO;AACLC,IAAAA,KAAK,EAAEF,QAAQ,GAAGG,MAAM,CAACC,UAAV,GAAuBC,SADjC;AAELC,IAAAA,MAAM,EAAEN,QAAQ,GAAGG,MAAM,CAACI,WAAV,GAAwBF;AAFnC,GAAP;AAID,CALD;;AAOA,OAAO,MAAMG,cAAc,GAAG,MAAkC;AAC9D,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8BX,QAAQ,CAACE,OAAD,CAA5C;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACE,QAAL,EAAe;AACb;AACD;;AAED,UAAMW,YAAY,GAAG,MAAM;AACzBD,MAAAA,aAAa,CAACT,OAAO,EAAR,CAAb;AACD,KAFD;;AAIAE,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCD,YAAlC;AAEA,WAAO,MAAM;AACXR,MAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,YAArC;AACD,KAFD;AAGD,GAdQ,EAcN,EAdM,CAAT;AAgBA,SAAOF,UAAP;AACD,CApBM","sourcesContent":["import { useEffect, useState } from \"react\"\nimport throttle from \"lodash.throttle\"\n\nconst isClient = typeof window === \"object\"\n\nconst getSize = () => {\n  return {\n    width: isClient ? window.innerWidth : undefined,\n    height: isClient ? window.innerHeight : undefined,\n  }\n}\n\nexport const useWindowSizes = (): ReturnType<typeof getSize> => {\n  const [windowSize, setWindowSize] = useState(getSize)\n\n  useEffect(() => {\n    if (!isClient) {\n      return\n    }\n\n    const handleResize = () => {\n      setWindowSize(getSize())\n    }\n\n    window.addEventListener(\"resize\", handleResize)\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize)\n    }\n  }, [])\n\n  return windowSize\n}\n"]},"metadata":{},"sourceType":"module"}